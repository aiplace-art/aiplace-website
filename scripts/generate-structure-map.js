#!/usr/bin/env node

/**
 * üó∫Ô∏è Structure Map Generator
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ignoreDirs: ['.git', 'node_modules', 'dist', 'build', '.next', 'coverage', 'tmp'],
  ignoreFiles: ['.DS_Store', 'Thumbs.db'],
  maxDepth: 4,
  outputFile: 'STRUCTURE.md'
};

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
const EMOJI = {
  folder: 'üìÇ',
  js: 'üìú',
  ts: 'üìò',
  tsx: '‚öõÔ∏è',
  jsx: '‚öõÔ∏è',
  css: 'üé®',
  scss: 'üé®',
  json: 'üìã',
  md: 'üìÑ',
  sh: 'üîß',
  yml: '‚öôÔ∏è',
  yaml: '‚öôÔ∏è',
  env: 'üîê',
  test: 'üß™',
  config: '‚öôÔ∏è',
  image: 'üñºÔ∏è',
  default: 'üìÑ'
};

class StructureMapGenerator {
  constructor(rootPath) {
    this.rootPath = rootPath;
    this.tree = [];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–π–ª–∞
  getEmoji(fileName, isDirectory) {
    if (isDirectory) return EMOJI.folder;

    const ext = path.extname(fileName).slice(1);
    if (EMOJI[ext]) return EMOJI[ext];

    if (fileName.includes('.test.') || fileName.includes('.spec.')) return EMOJI.test;
    if (fileName.includes('config')) return EMOJI.config;
    if (['.png', '.jpg', '.jpeg', '.gif', '.svg'].includes(`.${ext}`)) return EMOJI.image;

    return EMOJI.default;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–ø–∫–∏
  getDescription(dirPath) {
    const descriptions = {
      'src': '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      'components': 'React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
      'pages': '–°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      'features': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏',
      'services': '–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏ API –∫–ª–∏–µ–Ω—Ç—ã',
      'utils': '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
      'hooks': 'React —Ö—É–∫–∏',
      'contexts': 'React –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã',
      'store': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º',
      'types': 'TypeScript —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã',
      'constants': '–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      'tests': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      'docs': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
      'config': '–§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      'scripts': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —É—Ç–∏–ª–∏—Ç—ã',
      'public': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã',
      '.github': 'GitHub –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'
    };

    const dirName = path.basename(dirPath);
    return descriptions[dirName] || '';
  }

  // –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats(dirPath) {
    let stats = {
      files: 0,
      dirs: 0,
      lines: 0,
      size: 0
    };

    const scan = (currentPath, depth = 0) => {
      if (depth > CONFIG.maxDepth) return;

      const items = fs.readdirSync(currentPath);

      items.forEach(item => {
        if (CONFIG.ignoreFiles.includes(item)) return;

        const itemPath = path.join(currentPath, item);
        const stat = fs.statSync(itemPath);

        if (stat.isDirectory()) {
          if (CONFIG.ignoreDirs.includes(item)) return;
          stats.dirs++;
          scan(itemPath, depth + 1);
        } else {
          stats.files++;
          stats.size += stat.size;

          // –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
          const ext = path.extname(item);
          if (['.js', '.ts', '.tsx', '.jsx', '.css', '.scss'].includes(ext)) {
            try {
              const content = fs.readFileSync(itemPath, 'utf8');
              stats.lines += content.split('\n').length;
            } catch (err) {}
          }
        }
      });
    };

    scan(dirPath);
    return stats;
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
  buildTree(dirPath, prefix = '', depth = 0) {
    if (depth > CONFIG.maxDepth) return;

    const items = fs.readdirSync(dirPath);
    const filteredItems = items.filter(item => {
      return !CONFIG.ignoreFiles.includes(item) &&
             !CONFIG.ignoreDirs.includes(item);
    });

    filteredItems.sort((a, b) => {
      const aPath = path.join(dirPath, a);
      const bPath = path.join(dirPath, b);
      const aIsDir = fs.statSync(aPath).isDirectory();
      const bIsDir = fs.statSync(bPath).isDirectory();

      // –ü–∞–ø–∫–∏ —Å–Ω–∞—á–∞–ª–∞
      if (aIsDir && !bIsDir) return -1;
      if (!aIsDir && bIsDir) return 1;
      return a.localeCompare(b);
    });

    filteredItems.forEach((item, index) => {
      const isLast = index === filteredItems.length - 1;
      const itemPath = path.join(dirPath, item);
      const stat = fs.statSync(itemPath);
      const isDirectory = stat.isDirectory();

      const connector = isLast ? '‚îî‚îÄ‚îÄ' : '‚îú‚îÄ‚îÄ';
      const emoji = this.getEmoji(item, isDirectory);

      let line = `${prefix}${connector} ${emoji} ${item}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –ø–∞–ø–æ–∫
      if (isDirectory && depth <= 1) {
        const description = this.getDescription(itemPath);
        if (description) {
          line += ` - ${description}`;
        }
      }

      this.tree.push(line);

      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–ø–∞–ø–∫–∏
      if (isDirectory) {
        const newPrefix = prefix + (isLast ? '    ' : '‚îÇ   ');
        this.buildTree(itemPath, newPrefix, depth + 1);
      }
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è markdown —Ñ–∞–π–ª–∞
  generate() {
    console.log('üó∫Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...\n');

    // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    const projectName = path.basename(this.rootPath);
    this.tree.push(`üì¶ ${projectName}/`);
    this.buildTree(this.rootPath, '', 0);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = this.getStats(this.rootPath);

    // –§–æ—Ä–º–∏—Ä—É–µ–º markdown
    const markdown = `# üó∫Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|---------|----------|
| üìÇ –ü–∞–ø–æ–∫ | ${stats.dirs} |
| üìÑ –§–∞–π–ª–æ–≤ | ${stats.files} |
| üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞ | ${stats.lines.toLocaleString('ru-RU')} |
| üíæ –†–∞–∑–º–µ—Ä | ${this.formatSize(stats.size)} |

## üå≥ –î–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
${this.tree.join('\n')}
\`\`\`

## üìÅ –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

### \`/src\` - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

- \`/components\` - –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- \`/features\` - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (feature-sliced design)
- \`/pages\` - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
- \`/services\` - API –∫–ª–∏–µ–Ω—Ç—ã –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
- \`/utils\` - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- \`/hooks\` - –ö–∞—Å—Ç–æ–º–Ω—ã–µ React —Ö—É–∫–∏
- \`/types\` - TypeScript —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

### \`/tests\` - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–í—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

- \`/unit\` - –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã
- \`/integration\` - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
- \`/e2e\` - End-to-end —Ç–µ—Å—Ç—ã

### \`/docs\` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.

- \`/api\` - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- \`/architecture\` - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- \`/guides\` - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

### \`/config\` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
–§–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π.

### \`/scripts\` - –°–∫—Ä–∏–ø—Ç—ã
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á.

### \`/public\` - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
–ü—É–±–ª–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —à—Ä–∏—Ñ—Ç—ã, –∏–∫–æ–Ω–∫–∏).

## üî¢ –°–∏—Å—Ç–µ–º–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏

–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤:

- \`00-09\` - –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- \`10-19\` - –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- \`20-29\` - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- \`30-39\` - –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
- \`40-49\` - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- \`50-59\` - –¢–µ—Å—Ç—ã
- \`60-69\` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- \`70-79\` - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- \`80-89\` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
- \`90-99\` - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ

## üìù –ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è

### –§–∞–π–ª—ã:
- **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã React**: \`PascalCase.tsx\`
- **–•—É–∫–∏**: \`useCamelCase.ts\`
- **–£—Ç–∏–ª–∏—Ç—ã**: \`camelCase.ts\`
- **–¢–∏–ø—ã**: \`camelCase.types.ts\`
- **–¢–µ—Å—Ç—ã**: \`fileName.test.ts\`

### –ü–∞–ø–∫–∏:
- **–í—Å–µ –ø–∞–ø–∫–∏**: \`kebab-case\`

## üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è

–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:

\`\`\`bash
# –ù–∞–π—Ç–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
find src/components -name "*.tsx"

# –ù–∞–π—Ç–∏ —Ç–µ—Å—Ç—ã
find tests -name "*.test.*"

# –ù–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
find config -name "*.json"
\`\`\`

## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã

–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:

\`\`\`bash
npm run generate:structure-map
\`\`\`

---

*–°–æ–∑–¥–∞–Ω–æ File System Architect üóÇÔ∏è*
`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const outputPath = path.join(this.rootPath, CONFIG.outputFile);
    fs.writeFileSync(outputPath, markdown, 'utf8');

    console.log(`‚úÖ –ö–∞—Ä—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–∞: ${CONFIG.outputFile}`);
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   üìÇ –ü–∞–ø–æ–∫: ${stats.dirs}`);
    console.log(`   üìÑ –§–∞–π–ª–æ–≤: ${stats.files}`);
    console.log(`   üìù –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${stats.lines.toLocaleString('ru-RU')}`);
    console.log(`   üíæ –†–∞–∑–º–µ—Ä: ${this.formatSize(stats.size)}\n`);
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
  formatSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
const rootPath = process.cwd();
const generator = new StructureMapGenerator(rootPath);
generator.generate();
