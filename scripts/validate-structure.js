#!/usr/bin/env node

/**
 * üîç File System Validator
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª
const CONFIG = {
  maxDepth: 5,                    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  maxFilesPerDir: 15,             // –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
  maxFileLines: 500,              // –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
  requireReadme: true,            // README –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
  forbiddenInRoot: [              // –ó–∞–ø—Ä–µ—â–µ–Ω—ã –≤ –∫–æ—Ä–Ω–µ
    '*.js', '*.ts', '*.tsx', '*.jsx',
    '*.css', '*.scss', '*.md'
  ],
  allowedInRoot: [                // –†–∞–∑—Ä–µ—à–µ–Ω—ã –≤ –∫–æ—Ä–Ω–µ
    'package.json', 'tsconfig.json', '.gitignore',
    'README.md', 'STRUCTURE.md', '.editorconfig',
    'next.config.js', 'vite.config.ts'
  ]
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  gray: '\x1b[90m'
};

class StructureValidator {
  constructor(rootPath) {
    this.rootPath = rootPath;
    this.errors = [];
    this.warnings = [];
    this.info = [];
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  validate() {
    console.log(`${colors.blue}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...${colors.reset}\n`);

    this.checkRootFiles();
    this.checkDirectoryStructure(this.rootPath, 0);
    this.checkNamingConventions();
    this.checkDuplicates();

    this.printReport();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
  checkRootFiles() {
    const files = fs.readdirSync(this.rootPath);

    files.forEach(file => {
      const filePath = path.join(this.rootPath, file);
      const stat = fs.statSync(filePath);

      if (stat.isFile() && !CONFIG.allowedInRoot.includes(file)) {
        if (this.matchesPattern(file, CONFIG.forbiddenInRoot)) {
          this.errors.push({
            type: 'ROOT_FILE',
            message: `–§–∞–π–ª "${file}" –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞`,
            path: filePath,
            severity: 'error'
          });
        }
      }
    });
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  checkDirectoryStructure(dirPath, depth) {
    if (depth > CONFIG.maxDepth) {
      this.warnings.push({
        type: 'MAX_DEPTH',
        message: `–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (${CONFIG.maxDepth})`,
        path: dirPath,
        severity: 'warning'
      });
      return;
    }

    const files = fs.readdirSync(dirPath);
    const regularFiles = files.filter(f => {
      const stat = fs.statSync(path.join(dirPath, f));
      return stat.isFile();
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
    if (regularFiles.length > CONFIG.maxFilesPerDir) {
      this.warnings.push({
        type: 'TOO_MANY_FILES',
        message: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ (${regularFiles.length}/${CONFIG.maxFilesPerDir})`,
        path: dirPath,
        severity: 'warning'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è README
    if (CONFIG.requireReadme && depth > 0 && depth <= 2) {
      const hasReadme = files.some(f => f.toLowerCase().startsWith('readme'));
      if (!hasReadme && regularFiles.length > 5) {
        this.warnings.push({
          type: 'NO_README',
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç README.md –≤ –≤–∞–∂–Ω–æ–π –ø–∞–ø–∫–µ',
          path: dirPath,
          severity: 'warning'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    regularFiles.forEach(file => {
      const filePath = path.join(dirPath, file);
      this.checkFileSize(filePath);
    });

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∞–ø–æ–∫
    files.forEach(file => {
      const filePath = path.join(dirPath, file);
      const stat = fs.statSync(filePath);

      if (stat.isDirectory() && !file.startsWith('.')) {
        this.checkDirectoryStructure(filePath, depth + 1);
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  checkFileSize(filePath) {
    const ext = path.extname(filePath);
    if (['.js', '.ts', '.tsx', '.jsx'].includes(ext)) {
      const content = fs.readFileSync(filePath, 'utf8');
      const lines = content.split('\n').length;

      if (lines > CONFIG.maxFileLines) {
        this.warnings.push({
          type: 'LARGE_FILE',
          message: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${lines}/${CONFIG.maxFileLines} —Å—Ç—Ä–æ–∫)`,
          path: filePath,
          severity: 'warning'
        });
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ naming conventions
  checkNamingConventions() {
    const checkDir = (dirPath) => {
      const files = fs.readdirSync(dirPath);

      files.forEach(file => {
        const filePath = path.join(dirPath, file);
        const stat = fs.statSync(filePath);

        if (stat.isDirectory()) {
          // –ü–∞–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ kebab-case
          if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(file) && !file.startsWith('.')) {
            this.warnings.push({
              type: 'NAMING',
              message: `–ü–∞–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ kebab-case: "${file}"`,
              path: filePath,
              severity: 'warning'
            });
          }
          checkDir(filePath);
        } else {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
          const ext = path.extname(file);
          const name = path.basename(file, ext);

          // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã React –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ PascalCase
          if (['.tsx', '.jsx'].includes(ext) && file.match(/[A-Z]/)) {
            if (!/^[A-Z][a-zA-Z0-9]*$/.test(name)) {
              this.warnings.push({
                type: 'NAMING',
                message: `–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ PascalCase: "${file}"`,
                path: filePath,
                severity: 'info'
              });
            }
          }
        }
      });
    };

    checkDir(this.rootPath);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  checkDuplicates() {
    const fileHashes = new Map();

    const scanDir = (dirPath) => {
      const files = fs.readdirSync(dirPath);

      files.forEach(file => {
        const filePath = path.join(dirPath, file);
        const stat = fs.statSync(filePath);

        if (stat.isDirectory() && !file.startsWith('.')) {
          scanDir(filePath);
        } else if (stat.isFile()) {
          const relativePath = path.relative(this.rootPath, filePath);
          const fileName = path.basename(file);

          if (!fileHashes.has(fileName)) {
            fileHashes.set(fileName, []);
          }
          fileHashes.get(fileName).push(relativePath);
        }
      });
    };

    scanDir(this.rootPath);

    // –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    fileHashes.forEach((paths, fileName) => {
      if (paths.length > 1 && !fileName.startsWith('.')) {
        this.info.push({
          type: 'DUPLICATE',
          message: `–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º: ${fileName}`,
          paths: paths,
          severity: 'info'
        });
      }
    });
  }

  // –í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞
  printReport() {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`${colors.blue}üìä –û–¢–ß–Å–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò –°–¢–†–£–ö–¢–£–†–´${colors.reset}`);
    console.log(`${'='.repeat(60)}\n`);

    // –û—à–∏–±–∫–∏
    if (this.errors.length > 0) {
      console.log(`${colors.red}‚ùå –û–®–ò–ë–ö–ò (${this.errors.length}):${colors.reset}`);
      this.errors.forEach((err, i) => {
        console.log(`  ${i + 1}. ${err.message}`);
        console.log(`     ${colors.gray}${err.path}${colors.reset}`);
      });
      console.log();
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (this.warnings.length > 0) {
      console.log(`${colors.yellow}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (${this.warnings.length}):${colors.reset}`);
      this.warnings.forEach((warn, i) => {
        console.log(`  ${i + 1}. ${warn.message}`);
        console.log(`     ${colors.gray}${warn.path}${colors.reset}`);
      });
      console.log();
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (this.info.length > 0) {
      console.log(`${colors.blue}‚ÑπÔ∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø (${this.info.length}):${colors.reset}`);
      this.info.slice(0, 5).forEach((info, i) => {
        console.log(`  ${i + 1}. ${info.message}`);
        if (info.paths) {
          info.paths.forEach(p => {
            console.log(`     ${colors.gray}‚Üí ${p}${colors.reset}`);
          });
        }
      });
      console.log();
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    const total = this.errors.length + this.warnings.length;
    const score = Math.max(0, 100 - (this.errors.length * 10) - (this.warnings.length * 2));

    let scoreColor = colors.green;
    let scoreEmoji = 'üü¢';
    let scoreText = '–û—Ç–ª–∏—á–Ω–æ';

    if (score < 90) {
      scoreColor = colors.yellow;
      scoreEmoji = 'üü°';
      scoreText = '–•–æ—Ä–æ—à–æ';
    }
    if (score < 70) {
      scoreColor = colors.yellow;
      scoreEmoji = 'üü†';
      scoreText = '–°—Ä–µ–¥–Ω–µ';
    }
    if (score < 50) {
      scoreColor = colors.red;
      scoreEmoji = 'üî¥';
      scoreText = '–ü–ª–æ—Ö–æ';
    }

    console.log(`${scoreColor}${scoreEmoji} –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: ${score}/100 (${scoreText})${colors.reset}\n`);

    if (this.errors.length === 0 && this.warnings.length === 0) {
      console.log(`${colors.green}‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏–¥–µ–∞–ª—å–Ω–∞!${colors.reset}\n`);
    } else if (this.errors.length > 0) {
      console.log(`${colors.red}üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏${colors.reset}\n`);
      process.exit(1);
    } else {
      console.log(`${colors.yellow}üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É${colors.reset}\n`);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  matchesPattern(fileName, patterns) {
    return patterns.some(pattern => {
      const regex = new RegExp(pattern.replace('*', '.*'));
      return regex.test(fileName);
    });
  }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
const rootPath = process.cwd();
const validator = new StructureValidator(rootPath);
validator.validate();
