// Example: How to integrate the Navigation component into your Next.js app

// ============================================================================
// 1. ROOT LAYOUT (app/layout.tsx)
// ============================================================================

import type { Metadata } from "next"
import { Inter } from "next/font/google"
import { ThemeProvider } from "@/components/theme-provider"
import "./globals.css"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "AiPlace - Where Creativity Meets AI",
  description: "Innovative AI solutions for creative professionals",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}

// ============================================================================
// 2. HOME PAGE (app/page.tsx)
// ============================================================================

import { Navigation } from "@/components/navigation"

export default function HomePage() {
  return (
    <main className="min-h-screen">
      {/* Navigation - Sticky at top */}
      <Navigation />

      {/* Hero Section */}
      <section id="hero" className="min-h-screen pt-24 px-6">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-6xl font-bold bg-gradient-brand bg-clip-text text-transparent">
            Where Creativity Meets AI
          </h1>
          <p className="text-xl text-navy-600 dark:text-navy-300 mt-6">
            Transforming ideas into reality with cutting-edge AI technology
          </p>
        </div>
      </section>

      {/* Services Section - Must have matching ID */}
      <section id="services" className="min-h-screen py-24 px-6 bg-gray-50 dark:bg-navy-950">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl font-bold text-navy-900 dark:text-white mb-12">
            Our Services
          </h2>
          {/* Service cards here */}
        </div>
      </section>

      {/* Portfolio Section - Must have matching ID */}
      <section id="portfolio" className="min-h-screen py-24 px-6">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl font-bold text-navy-900 dark:text-white mb-12">
            Portfolio
          </h2>
          {/* Portfolio items here */}
        </div>
      </section>

      {/* About Section - Must have matching ID */}
      <section id="about" className="min-h-screen py-24 px-6 bg-gray-50 dark:bg-navy-950">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl font-bold text-navy-900 dark:text-white mb-12">
            About Us
          </h2>
          {/* About content here */}
        </div>
      </section>

      {/* Blog Section - Must have matching ID */}
      <section id="blog" className="min-h-screen py-24 px-6">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl font-bold text-navy-900 dark:text-white mb-12">
            Blog
          </h2>
          {/* Blog posts here */}
        </div>
      </section>

      {/* Contact Section - Must have matching ID */}
      <section id="contact" className="min-h-screen py-24 px-6 bg-gray-50 dark:bg-navy-950">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-4xl font-bold text-navy-900 dark:text-white mb-12">
            Get In Touch
          </h2>
          {/* Contact form here */}
        </div>
      </section>
    </main>
  )
}

// ============================================================================
// 3. CUSTOM PAGE LAYOUT (app/custom/layout.tsx)
// ============================================================================

import { Navigation } from "@/components/navigation"

export default function CustomLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      <Navigation />
      <main className="pt-24">
        {children}
      </main>
    </>
  )
}

// ============================================================================
// 4. GLOBAL STYLES (app/globals.css)
// ============================================================================

/*
Add these CSS variables for dark mode support:
*/

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222 47% 11%;
    --primary: 283 62% 65%;
    --primary-foreground: 0 0% 100%;
    /* ... other CSS variables */
  }

  .dark {
    --background: 222 47% 11%;
    --foreground: 210 40% 98%;
    --primary: 283 62% 65%;
    --primary-foreground: 0 0% 100%;
    /* ... other CSS variables */
  }
}

/* Smooth scroll behavior */
html {
  scroll-behavior: smooth;
}

/* Prevent layout shift when scrollbar appears */
html {
  overflow-y: scroll;
}

/* Custom scrollbar (optional) */
::-webkit-scrollbar {
  width: 12px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(135deg, #FF1493 0%, #9B4DFF 33%, #4D9FFF 66%, #00D4FF 100%);
  border-radius: 6px;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(135deg, #E6007A 0%, #7A1FFF 33%, #0080FF 66%, #00B3E6 100%);
}

// ============================================================================
// 5. TYPESCRIPT CONFIGURATION (for useTheme hook)
// ============================================================================

/*
Ensure your tsconfig.json includes:
{
  "compilerOptions": {
    "strict": true,
    "skipLibCheck": true,
    "lib": ["dom", "dom.iterable", "esnext"]
  }
}
*/

// ============================================================================
// 6. CUSTOMIZING NAVIGATION ITEMS
// ============================================================================

/*
To change navigation items, edit the navItems array in navigation.tsx:
*/

const navItems = [
  { label: "Home", href: "#hero" },          // Smooth scroll to section
  { label: "Features", href: "#features" },  // Smooth scroll to section
  { label: "Pricing", href: "#pricing" },    // Smooth scroll to section
  { label: "Blog", href: "/blog" },          // Regular page navigation
  { label: "Docs", href: "/docs" },          // Regular page navigation
]

// ============================================================================
// 7. MOBILE MENU CUSTOMIZATION
// ============================================================================

/*
To customize mobile menu animations, modify the variants in navigation.tsx:
*/

const mobileMenuVariants = {
  closed: {
    opacity: 0,
    x: "100%",
    transition: { duration: 0.3, ease: [0.16, 1, 0.3, 1] }
  },
  open: {
    opacity: 1,
    x: 0,
    transition: { duration: 0.4, ease: [0.16, 1, 0.3, 1] }
  }
}

// ============================================================================
// 8. ADDING ADDITIONAL FEATURES
// ============================================================================

// Example: Add search button to navigation

import { Search } from "lucide-react"

// In the navigation component, add before the theme toggle:
<motion.button
  whileHover={{ scale: 1.05 }}
  whileTap={{ scale: 0.95 }}
  className="p-2 rounded-lg bg-gray-100 dark:bg-navy-800 text-navy-700 dark:text-navy-100"
  aria-label="Search"
>
  <Search className="w-5 h-5" />
</motion.button>

// Example: Add user profile dropdown

import { User } from "lucide-react"

// Add to the right section:
<div className="relative">
  <motion.button
    whileHover={{ scale: 1.05 }}
    whileTap={{ scale: 0.95 }}
    className="p-2 rounded-full bg-gradient-brand"
  >
    <User className="w-5 h-5 text-white" />
  </motion.button>
  {/* Add dropdown menu here */}
</div>

// ============================================================================
// 9. TESTING CHECKLIST
// ============================================================================

/*
Before deploying, test:
- ✅ Smooth scrolling to all sections
- ✅ Active section highlighting
- ✅ Theme toggle (light/dark/system)
- ✅ Mobile menu open/close
- ✅ Logo click returns to top
- ✅ CTA button navigates correctly
- ✅ Sticky header transforms on scroll
- ✅ Responsive design on all breakpoints
- ✅ Keyboard navigation
- ✅ Screen reader compatibility
*/

// ============================================================================
// 10. DEPLOYMENT NOTES
// ============================================================================

/*
Before production:
1. Optimize images: Use Next.js Image optimization
2. Add proper alt text to logo
3. Configure CSP headers for framer-motion
4. Test on multiple browsers
5. Verify theme persistence
6. Check performance metrics
7. Enable production build optimizations
*/

export {}
